import java.nio.file.Files
import java.nio.file.StandardCopyOption

version = "$hackerrank"

def hackerRankTestsV1SwaggerFilePath = Files.createTempFile('hackerrank-v3.tests.yml', null)
def hackerRankCandidatesV1SwaggerFilePath = Files.createTempFile('hackerrank-v3.candidates.yml', null)

task downloadHackerRankTestsSwaggerFiles {
    doLast {
        Files.copy(
                new URL("${artifactsUrl}/electrica-connector-hackerrank/swagger/hackerrank-v3.tests.yml").openStream(),
                hackerRankTestsV1SwaggerFilePath,
                StandardCopyOption.REPLACE_EXISTING
        )
    }
}

task downloadHackerRankCandidatesSwaggerFiles {
    doLast {
        Files.copy(
                new URL("${artifactsUrl}/electrica-connector-hackerrank/swagger/hackerrank-v3.candidates.yml").openStream(),
                hackerRankCandidatesV1SwaggerFilePath,
                StandardCopyOption.REPLACE_EXISTING
        )
    }
}
generateSwaggerCode.dependsOn downloadHackerRankTestsSwaggerFiles
generateSwaggerCode.dependsOn downloadHackerRankCandidatesSwaggerFiles

swaggerSources {
    TestsV1 {
        code {
            inputFile = hackerRankTestsV1SwaggerFilePath.toFile()
            language = 'java'
            configFile = file('./swagger/hackerrank-v3.tests.json')
            outputDir = file("$buildDir/swagger-code")
            components = ['models']
            wipeOutputDir = false
        }
    }
    CandidatesV1 {
        code {
            inputFile = hackerRankCandidatesV1SwaggerFilePath.toFile()
            language = 'java'
            configFile = file('./swagger/hackerrank-v3.candidates.json')
            outputDir = file("$buildDir/swagger-code")
            components = ['models']
            wipeOutputDir = false
        }
    }
}
